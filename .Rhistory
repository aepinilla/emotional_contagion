##############################
# Load librairies
library(tidyverse)
##############################
##############################
# Import data
file_path <- "data/all_data.csv"
all_data <- read.csv(file_path, header = TRUE, sep = ';')
##############################
##############################
# Remove unnecesary rows
data <- all_data %>%
filter(trialcode != 'positive_video',
trialcode != 'negative_video',
trialcode != 'ITI',
trialcode != 'negative_dimension_movie',
trialcode != 'positive_dimension_movie',
trialcode != 'arousal_dimension_movie',
blockcode != 'emotional_arousal',
blockcode != 'visto_escena')
# Change column names
colnames(data)[c(2, 4, 6, 16, 17, 18, 19, 20, 21, 22, 30, 32, 34)] <- c('experiment_date',
'participant',
'question',
'face_name',
'negativity_face',
'positivity_face',
'arousal_face',
'negativity_video',
'positivity_video',
'arousal_video',
'age_year',
'age_month',
'age_day')
#Assign labels to categorical variables
data$induction <- factor(data$group, levels = c(1, 2), labels = c('Negative', 'Positive'))
data$face_type <- factor(data$values.emotion, levels = c('negative', 'positive'), labels = c('Angry', 'Happy'))
##############################
##############################
# Create emotional evaluations dataframe
evaluations <- data %>%
select(participant,
induction,
face_type,
face_name,
negativity_face,
positivity_face,
arousal_face,
negativity_video,
positivity_video,
arousal_video,
blockcode) %>%
filter(blockcode == 'CE') %>%
distinct() %>%
select(-blockcode)
##############################
##############################
# Create questionnaires dataframe
questionnaires <- data %>%
select(participant,
induction,
blockcode,
trialnum,
question,
response) %>%
filter(blockcode == 'likertIRI' || 'likertBES' || 'likertCCP' || 'likertECE',
blockcode != 'CE') %>%
drop_na()
colnames(questionnaires)[3] <- 'questionnaire'
questionnaires$questionnaire <- as.character(questionnaires$questionnaire)
questionnaires$questionnaire[questionnaires$questionnaire == 'likertIRI'] <- 'IRI'
questionnaires$questionnaire[questionnaires$questionnaire == 'likertCCP'] <- 'CCP'
questionnaires$questionnaire[questionnaires$questionnaire == 'likertBES'] <- 'BES'
questionnaires$questionnaire[questionnaires$questionnaire == 'likertECE'] <- 'ECE'
questionnaires$questionnaire <- factor(questionnaires$questionnaire,
levels = c('IRI',
'BES',
'CCP',
'ECE'))
##############################
##############################
# Create demographics dataframe
demographics <- data %>%
select(participant,
induction,
experiment_date,
age_year,
age_month,
age_day,
sex_response) %>%
drop_na()
##############################
##############################
# Create dataframe with PANAS responses
panas <- data %>%
select(participant,
induction,
q1_panas_P_response:q20_panas_N_response) %>%
select(participant,
induction,
contains('response')) %>%
drop_na()
##############################
#############################################################
## Process demographics data
## Andres Pinilla Palacios
## apinillapalacios@gmail.com - March 2019
#############################################################
##############################
# Load librairies
#library(plyr)
library(tidyverse)
#library(lubridate)
##############################
demographics$age_month <- as.character(as.character(demographics$age_month))
demographics$age_month <- revalue(demographics$age_month, c("    Enero     "= 1))
demographics$age_month <- revalue(demographics$age_month, c("    Febrero   "= 2))
demographics$age_month <- revalue(demographics$age_month, c("    Marzo    "=  3))
demographics$age_month <- revalue(demographics$age_month, c("    Abril    "=  4))
demographics$age_month <- revalue(demographics$age_month, c("    Mayo    "=   5))
demographics$age_month <- revalue(demographics$age_month, c("    Junio    "=  6))
demographics$age_month <- revalue(demographics$age_month, c("    Julio    "=  7))
demographics$age_month <- revalue(demographics$age_month, c("    Agosto    "= 8))
demographics$age_month <- revalue(demographics$age_month, c("    Septiembre    "=  9))
demographics$age_month <- revalue(demographics$age_month, c("    Octubre    "=  10))
demographics$age_month <- revalue(demographics$age_month, c("    Noviembre"=  11))
demographics$age_month <- revalue(demographics$age_month, c("    Diciembre"=  12))
demographics$birthdate <- paste(demographics$age_day, demographics$age_month, demographics$age_year)
int_ages <- interval(dmy(demographics$birthdate), myd(demographics$experiment_date))
demographics$age <- time_length(int_ages, 'year')
View(demographics)
mean_age = round(mean(demographics$age), digits = 2)
std_age = round(sd(demographics$age), digits = 2)
##############################
# Calculate age of participants at the date the experiment was conducted
demographics$birthdate <- paste(demographics$age_day, demographics$age_month, demographics$age_year)
int_ages <- interval(dmy(demographics$birthdate), myd(demographics$experiment_date))
demographics$age <- time_length(int_ages, 'year')
mean_age = round(mean(demographics$age), digits = 2)
std_age = round(sd(demographics$age), digits = 2)
participants_sex <- demographics %>%
select(participant, sex_response)
colnames(participants_sex)[c(2)] <- c('gender')
##############################
# Count number of participants per gender
participants_sex <- demographics %>%
select(participant, sex_response)
View(all_data)
View(demographics)
#############################################################
## Read data and transform it to Tidy format
## Andres Pinilla Palacios
## apinillapalacios@gmail.com - March 2019
#############################################################
##############################
# Load libraries
library(tidyverse)
##############################
##############################
# Import data
file_path <- "data/all_data.csv"
all_data <- read.csv(file_path, header = TRUE, sep = ';')
##############################
##############################
# Remove unnecesary rows
data <- all_data %>%
filter(trialcode != 'positive_video',
trialcode != 'negative_video',
trialcode != 'ITI',
trialcode != 'negative_dimension_movie',
trialcode != 'positive_dimension_movie',
trialcode != 'arousal_dimension_movie',
blockcode != 'emotional_arousal',
blockcode != 'visto_escena')
# Change column names
colnames(data)[c(2, 4, 6, 16, 17, 18, 19, 20, 21, 22, 30, 32, 34)] <- c('experiment_date',
'participant',
'question',
'face_name',
'negativity_face',
'positivity_face',
'arousal_face',
'negativity_video',
'positivity_video',
'arousal_video',
'age_year',
'age_month',
'age_day')
#Assign labels to categorical variables
data$induction <- factor(data$group, levels = c(1, 2), labels = c('Negative', 'Positive'))
data$face_type <- factor(data$values.emotion, levels = c('negative', 'positive'), labels = c('Angry', 'Happy'))
##############################
##############################
# Create emotional evaluations dataframe
evaluations <- data %>%
select(participant,
induction,
face_type,
face_name,
negativity_face,
positivity_face,
arousal_face,
negativity_video,
positivity_video,
arousal_video,
blockcode) %>%
filter(blockcode == 'CE') %>%
distinct() %>%
select(-blockcode)
##############################
##############################
# Create questionnaires dataframe
questionnaires <- data %>%
select(participant,
induction,
blockcode,
trialnum,
question,
response) %>%
filter(blockcode == 'likertIRI' || 'likertBES' || 'likertCCP' || 'likertECE',
blockcode != 'CE') %>%
drop_na()
colnames(questionnaires)[3] <- 'questionnaire'
questionnaires$questionnaire <- as.character(questionnaires$questionnaire)
questionnaires$questionnaire[questionnaires$questionnaire == 'likertIRI'] <- 'IRI'
questionnaires$questionnaire[questionnaires$questionnaire == 'likertCCP'] <- 'CCP'
questionnaires$questionnaire[questionnaires$questionnaire == 'likertBES'] <- 'BES'
questionnaires$questionnaire[questionnaires$questionnaire == 'likertECE'] <- 'ECE'
questionnaires$questionnaire <- factor(questionnaires$questionnaire,
levels = c('IRI',
'BES',
'CCP',
'ECE'))
##############################
##############################
# Create demographics dataframe
demographics <- data %>%
select(participant,
induction,
experiment_date,
age_year,
age_month,
age_day,
sex_response) %>%
drop_na()
##############################
##############################
# Create dataframe with PANAS responses
panas <- data %>%
select(participant,
induction,
q1_panas_P_response:q20_panas_N_response) %>%
select(participant,
induction,
contains('response')) %>%
drop_na()
##############################
##############################
# Load libraries
library(tidyverse)
ec_equation <- function(nv, nf, pv, pf, av, af) {
1 - ((sqrt((nv - nf)^2 +
(pv - pf)^2 +
(av - af)^2)) / (100 * sqrt(3)))
}
evaluations$emotional_contagion <- ec_equation(
ec$negativity_video,
ec$negativity_face,
ec$positivity_video,
ec$positivity_face,
ec$arousal_video,
ec$arousal_face
)
ec_equation <- function(nv, nf, pv, pf, av, af) {
1 - ((sqrt((nv - nf)^2 +
(pv - pf)^2 +
(av - af)^2)) / (100 * sqrt(3)))
}
ec_equation <- function(nv, nf, pv, pf, av, af) {
1 - ((sqrt((nv - nf)^2 +
(pv - pf)^2 +
(av - af)^2)) / (100 * sqrt(3)))
}
evaluations$emotional_contagion <- ec_equation(
evaluations$negativity_video,
evaluations$negativity_face,
evaluations$positivity_video,
evaluations$positivity_face,
evaluations$arousal_video,
evaluations$arousal_face
)
View(evaluations)
emotional_contagion <- evaluations %>%
group_by(participant, induction, face_type) %>%
summarise(emotional_contagion = mean(emotional_contagion))
View(evaluations)
#############################################################
## Read data and transform it to Tidy format
## Andres Pinilla Palacios
## apinillapalacios@gmail.com - March 2019
#############################################################
##############################
# Load libraries
library(tidyverse)
##############################
##############################
# Import data
file_path <- "data/all_data.csv"
all_data <- read.csv(file_path, header = TRUE, sep = ';')
##############################
##############################
# Remove unnecesary rows
data <- all_data %>%
filter(trialcode != 'positive_video',
trialcode != 'negative_video',
trialcode != 'ITI',
trialcode != 'negative_dimension_movie',
trialcode != 'positive_dimension_movie',
trialcode != 'arousal_dimension_movie',
blockcode != 'emotional_arousal',
blockcode != 'visto_escena')
# Change column names
colnames(data)[c(2, 4, 6, 16, 17, 18, 19, 20, 21, 22, 30, 32, 34)] <- c('experiment_date',
'participant',
'question',
'face_name',
'negativity_face',
'positivity_face',
'arousal_face',
'negativity_video',
'positivity_video',
'arousal_video',
'age_year',
'age_month',
'age_day')
#Assign labels to categorical variables
data$induction <- factor(data$group, levels = c(1, 2), labels = c('Negative', 'Positive'))
data$face_type <- factor(data$values.emotion, levels = c('negative', 'positive'), labels = c('Angry', 'Happy'))
##############################
##############################
# Create emotional evaluations dataframe
evaluations <- data %>%
select(participant,
induction,
face_type,
face_name,
negativity_face,
positivity_face,
arousal_face,
negativity_video,
positivity_video,
arousal_video,
blockcode) %>%
filter(blockcode == 'CE') %>%
distinct() %>%
select(-blockcode)
##############################
##############################
# Create questionnaires dataframe
questionnaires <- data %>%
select(participant,
induction,
blockcode,
trialnum,
question,
response) %>%
filter(blockcode == 'likertIRI' || 'likertBES' || 'likertCCP' || 'likertECE',
blockcode != 'CE') %>%
drop_na()
colnames(questionnaires)[3] <- 'questionnaire'
questionnaires$questionnaire <- as.character(questionnaires$questionnaire)
questionnaires$questionnaire[questionnaires$questionnaire == 'likertIRI'] <- 'IRI'
questionnaires$questionnaire[questionnaires$questionnaire == 'likertCCP'] <- 'CCP'
questionnaires$questionnaire[questionnaires$questionnaire == 'likertBES'] <- 'BES'
questionnaires$questionnaire[questionnaires$questionnaire == 'likertECE'] <- 'ECE'
questionnaires$questionnaire <- factor(questionnaires$questionnaire,
levels = c('IRI',
'BES',
'CCP',
'ECE'))
##############################
##############################
# Create demographics dataframe
demographics <- data %>%
select(participant,
induction,
experiment_date,
age_year,
age_month,
age_day,
sex_response) %>%
drop_na()
##############################
##############################
# Create dataframe with PANAS responses
panas <- data %>%
select(participant,
induction,
q1_panas_P_response:q20_panas_N_response) %>%
select(participant,
induction,
contains('response')) %>%
drop_na()
##############################
#############################################################
## Read data and transform it to Tidy format
## Andres Pinilla Palacios
## apinillapalacios@gmail.com - March 2019
#############################################################
##############################
# Load libraries
library(tidyverse)
##############################
##############################
# Import data
file_path <- "data/all_data.csv"
all_data <- read.csv(file_path, header = TRUE, sep = ';')
##############################
##############################
# Remove unnecesary rows
data <- all_data %>%
filter(trialcode != 'positive_video',
trialcode != 'negative_video',
trialcode != 'ITI',
trialcode != 'negative_dimension_movie',
trialcode != 'positive_dimension_movie',
trialcode != 'arousal_dimension_movie',
blockcode != 'emotional_arousal',
blockcode != 'visto_escena')
# Change column names
colnames(data)[c(2, 4, 6, 16, 17, 18, 19, 20, 21, 22, 30, 32, 34)] <- c('experiment_date',
'participant',
'question',
'face_name',
'negativity_face',
'positivity_face',
'arousal_face',
'negativity_video',
'positivity_video',
'arousal_video',
'age_year',
'age_month',
'age_day')
#Assign labels to categorical variables
data$induction <- factor(data$group, levels = c(1, 2), labels = c('Negative', 'Positive'))
data$face_type <- factor(data$values.emotion, levels = c('negative', 'positive'), labels = c('Angry', 'Happy'))
##############################
##############################
# Create emotional evaluations dataframe
evaluations <- data %>%
select(participant,
induction,
face_type,
face_name,
negativity_face,
positivity_face,
arousal_face,
negativity_video,
positivity_video,
arousal_video,
blockcode) %>%
filter(blockcode == 'CE') %>%
distinct() %>%
select(-blockcode)
##############################
##############################
# Create questionnaires dataframe
questionnaires <- data %>%
select(participant,
induction,
blockcode,
trialnum,
question,
response) %>%
filter(blockcode == 'likertIRI' || 'likertBES' || 'likertCCP' || 'likertECE',
blockcode != 'CE') %>%
drop_na()
colnames(questionnaires)[3] <- 'questionnaire'
questionnaires$questionnaire <- as.character(questionnaires$questionnaire)
questionnaires$questionnaire[questionnaires$questionnaire == 'likertIRI'] <- 'IRI'
questionnaires$questionnaire[questionnaires$questionnaire == 'likertCCP'] <- 'CCP'
questionnaires$questionnaire[questionnaires$questionnaire == 'likertBES'] <- 'BES'
questionnaires$questionnaire[questionnaires$questionnaire == 'likertECE'] <- 'ECE'
questionnaires$questionnaire <- factor(questionnaires$questionnaire,
levels = c('IRI',
'BES',
'CCP',
'ECE'))
##############################
##############################
# Create demographics dataframe
demographics <- data %>%
select(participant,
induction,
experiment_date,
age_year,
age_month,
age_day,
sex_response) %>%
drop_na()
##############################
##############################
# Create dataframe with PANAS responses
panas <- data %>%
select(participant,
induction,
q1_panas_P_response:q20_panas_N_response) %>%
select(participant,
induction,
contains('response')) %>%
drop_na()
##############################
